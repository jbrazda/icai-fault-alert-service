<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Aug 29, 2019 12:35:05 PM                                                        

     project Informatica Cloud Custom Fault Alert Service Build   
     description
                   
     jbrazda                                                                
     ====================================================================== -->
<project name="IICS Build Script" default="help" basedir=".">
	<description>
            IICS CAI Component Build Script
    </description>

	<!-- Global properties -->

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="exec.ext" value="sh">
		<os family="unix" />
	</condition>

	<condition property="exec.ext" value="bat">
		<os family="windows" />
	</condition>

	<condition property="shell" value="bash">
		<os family="unix" />
	</condition>

	<condition property="shell" value="cmd.exe">
		<os family="windows" />
	</condition>

	<condition property="shell.options" value="-c">
		<os name="Mac OS X" />
	</condition>

	<condition property="shell.open" value=" open ">
		<os name="Mac OS X" />
	</condition>

	<property name="shell.open" value="" />

	<condition property="shell.options" value="-c">
		<os family="unix" />
	</condition>

	<condition property="shell.options" value="/c">
		<os family="windows" />
	</condition>



	<target name="-init" unless="ems.initialized">
		<property file="${iics_user.property.file}" />
		<property file="build.properties" />
		<path id="saxon.classpath">
			<fileset dir="${saxon.lib}">
				<include name="*.jar" />
			</fileset>
		</path>
		<!-- Platform Specific GNU sed -->
		<condition property="gnu.sed" value="${tools.gnu.sed.win.amd64}">
			<and>
				<os family="windows" />
				<os arch="amd64" />
			</and>
		</condition>
		<condition property="gnu.sed" value="${tools.gnu.sed.win.x86}">
			<and>
				<os family="windows" />
				<os arch="x86" />
			</and>
		</condition>
		<condition property="gnu.sed" value="${tools.gnu.sed.mac}">
			<os name="Mac OS X" />
		</condition>
		<condition property="gnu.sed" value="sed">
			<os family="unix" />
		</condition>

		<!-- IICS Package Manager Tool OS Specific-->
		<condition property="tool.iics" value="${tools.iics.win.amd64}">
			<and>
				<os family="windows" />
				<os arch="amd64" />
			</and>
		</condition>
		<condition property="tool.iics" value="${tools.iics.win.x86}">
			<and>
				<os family="windows" />
				<os arch="x86" />
			</and>
		</condition>
		<condition property="tool.iics" value="${tools.iics.mac}">
			<os name="Mac OS X" />
		</condition>
		<condition property="tool.iics" value="${tools.iics.linux}">
			<os family="unix" />
		</condition>

		<!-- Check if the iics tool is avialable on path specified  in  tool.iics property-->
		<condition property="iics.available">
			<available file="${tool.iics}" />
		</condition>


		<property environment="env" />
	</target>


	<target name="-env.info" unless="env.info.displayed" depends="-init">
		<echo level="info">========================================</echo>
		<echo level="info">==        IPD Bunde Build             ==</echo>
		<echo level="info">========================================</echo>
		<echo level="info">Java Version:    ${java.runtime.version}</echo>
		<echo level="info">Java Home:       ${java.home}</echo>
		<echo level="info">Ant Version:     ${ant.version}</echo>
		<echo level="info">Ant Lib:         ${ant.library.dir}</echo>
		<echo level="info">eclipse.home:    ${eclipse.home}</echo>
		<echo level="info">shell:           ${shell}</echo>
		<echo level="info">os.name:         ${os.name}</echo>
		<echo level="info">os.version:      ${os.version}</echo>
		<echo level="info">os.arch:         ${os.arch}</echo>
		<echo level="info">user.name:       ${user.name}</echo>
		<echo level="info">user.dir:        ${user.dir}</echo>
		<echo level="info">user.home:       ${user.home}</echo>
		<echo level="info">env.HOME:        ${env.HOME}</echo>
		<echo level="info">env.LANG:        ${env.LANG}</echo>
		<echo level="info">env.SHELL:       ${env.SHELL}</echo>
		<echo level="info">env.PATH:        ${env.PATH}</echo>
		<echo level="info">env.JAVA_HOME:   ${env.JAVA_HOME}</echo>
		<echo level="info">========================================</echo>
		<property name="env.info.displayed" value="true" />
	</target>


	<target name="help" description="help - describes how to use this script" depends="-env.info">
		<echo level="info">This ant script provides set of IICS CAI Bundle Build</echo>
		<echo level="info">Read the doc/README.MD or README.html for more details</echo>
		<echo level="info">use ant -projecthelp to see available targets</echo>
		<property name="help.file" value="${basedir}/README.html" />
		<echo level="info">${shell.open} ${help.file}</echo>
		<exec executable="${shell}" spawn="yes">
			<arg value="${shell.options}" />
			<arg line="'${shell.open} ${help.file}'" />
		</exec>
	</target>



	<target name="-download.iics" depends="-env.info" unless="iics.available">
		<!-- Download OS Specific version of the tool-->
		<condition property="url.download.iics" value="${url.download.iics.win.x86}">
			<and>
				<os family="windows" />
				<os arch="amd64" />
			</and>
		</condition>
		<condition property="url.download.iics" value="${url.download.iics.win}">
			<and>
				<os family="windows" />
				<os arch="x86" />
			</and>
		</condition>
		<condition property="url.download.iics" value="${url.download.iics.mac}">
			<os name="Mac OS X" />
		</condition>
		<condition property="url.download.iics" value="${url.download.iics.linux}">
			<os family="unix" />
		</condition>
		<echo level="info">IICS Tool Available: ${iics.available}</echo>
		<echo level="info">Downloading: ${url.download.iics}</echo>
		<mkdir dir="${tools.lib}" />
		<get src="${url.download.iics}" dest="${tool.iics}" />
		<chmod file="${tool.iics}" perm="ugo+rx" />
	</target>


	<target name="-select-release" unless="iics.release">
		<fileset id="available.releases" dir="${basedir}/conf" includes="*.release.properties" />
		<pathconvert property="available.releases.list" refid="available.releases" pathsep="," />
		<pathconvert property="available.releases.print" refid="available.releases" pathsep="${line.separator}" />
		<echo level="info">Available Release Configurations:</echo>
		<echo level="info">=================================</echo>
		<echo level="info">${available.releases.print}</echo>
		<echo level="info">=================================</echo>
		<input validargs="${available.releases.list}" message="Select Release Configuration:" addproperty="iics.release">
		</input>
		
	</target>
	
	<target name="-select-package-config" unless="iics.target.package.config">
        <fileset id="available.package.lists" dir="${basedir}/conf" includes="*.package.txt" />
        <pathconvert property="available.package.list.files" refid="available.package.lists" pathsep="," />
        <pathconvert property="available.package.list.files.print" refid="available.package.lists" pathsep="${line.separator}" />
        <echo level="info">Available Target Package Configurations:</echo>
        <echo level="info">========================================</echo>
        <echo level="info">${available.package.list.files.print}</echo>
        <echo level="info">========================================</echo>
        <input validargs="${available.package.list.files}" message="Select Package Configuration:" addproperty="iics.target.package.config">
        </input>
        <basename file="${iics.target.package.config}" property="iics.target.package.config.basename" suffix=".txt" />
        <echo level="info">Selected Target Package Configuration: ${iics.target.package.config.basename}</echo>
        <echo level="info">Selected File: ${iics.target.package.config}</echo>
    </target>

	<target name="-set-release-properties">
		<basename file="${iics.release}" property="iics.release.basename" suffix=".properties" />
        <echo level="info">Selected Release Configuration: ${iics.release.basename}</echo>
        <echo level="info">Selected File: ${iics.release}</echo>
	</target>
	
	<target name="-select-source-environment" unless="iics.source.environment" depends="-load.release.properties">
		<input validargs="${iics.environment.list}" message="Select Source Environment:" addproperty="iics.source.environment">
		</input>
		<echo level="info">Selected Source Environment: ${iics.source.environment}</echo>
	</target>

	<target name="-select-target-environment" unless="iics.target.environment" depends="-load.release.properties">
		<input validargs="${iics.environment.list}" message="Select Target Environment:" addproperty="iics.target.environment">
		</input>
		<echo level="info">Selected Target Environment: ${iics.target.environment}</echo>
	</target>
	
	<target name="-set-source-properties" depends="-select-source-environment">
       <property name="iics.export.dir">${basedir}/target/${iics.release.basename}/export/${iics.source.environment}</property>
       <property name="iics.export.list.location" location="${iics.export.dir}/${iics.list.output}" />
       <property name="iics.export.file.location" location="${iics.export.dir}/${iics.export.output}" />
	</target>
	
	<target name="-set-target-properties" depends="-select-target-environment">
        <property name="iics.import.dir">${basedir}/target/${iics.release.basename}/import/${iics.target.environment}</property>
	</target>

	<target name="-load.release.properties" depends="-select-release,-set-release-properties">
		<echo level="info">Loading ${iics.release}</echo>
		<property file="${iics.release}" />
		<echo level="info">Loading External properties (credentials) from ${iics.external.properties}</echo>
		<property file="${iics.external.properties}" />
		<echo level="info">TODO: Add Inputs Validation</echo>
	</target>

	<target name="-check.external.properties">
		<condition property="iics.external.properties.available">
			<and>
				<isset property="iics.external.properties" />
			</and>
		</condition>
	</target>

	<target name="-set.source.credentials" depends="-check.external.properties" if="iics.external.properties.available">
		<set.environment.credentials direction="source" environment="${iics.source.environment}" />
	</target>
    
	<target name="-set.target.credentials" depends="-check.external.properties" if="iics.external.properties.available">
        <set.environment.credentials direction="target" environment="${iics.target.environment}" />
    </target>
	
	<target name="-check.source.creds">
		<condition property="iics.source.pwd.set">
			<isset property="iics.source.password" />
		</condition>
		<condition property="iics.source.user.set">
			<isset property="iics.source.user" />
		</condition>
		<echo level="info">$${iics.source.user.set}:${iics.source.user.set}</echo>
		<echo level="info">$${iics.source.pwd.set}:${iics.source.pwd.set}</echo>
	</target>

	<target name="-iics.input.source.creds" depends="-set.source.credentials,-check.source.creds,-iics.input.source.user,-iics.input.source.pwd">
	</target>

	<target name="-iics.input.source.user" unless="iics.source.pwd.set">
		<input addproperty="iics.user" message="Provide Source user name">
		</input>
	</target>

	<target name="-iics.input.source.pwd" unless="iics.source.pwd.set">
		<input addproperty="iics.password" message="Provide Source Org Password for ${iics.user}">
			<!-- <handler type="secure"/>  unfortunately this does not work in eclipse -->
		</input>
	</target>
	
	<target name="-check.export.files">
		<condition property="iics.list.available">
			<available file="${iics.export.dir}/${iics.list.output}" />
		</condition>
		<condition property="iics.export.available">
			<available file="${iics.export.dir}/${iics.export.output}" />
		</condition>
	</target>

	<target name="iics.list" depends="-download.iics,-check.export.files,-iics.input.source.creds" unless="iics.list.available">
		<iics.list id="${iics.release.basename}" 
			output="${iics.list.output}" 
			todir="${iics.export.dir}" 
			query="${iics.query}" 
			user="${iics.source.user}" 
			password="${iics.source.password}" 
			region="${iics.region}" />
	</target>

	<target name="iics.export" depends="iics.list,-check.export.files,-iics.input.source.creds" unless="iics.export.available">
		<iics.export id="${iics.release.basename}" 
			listfile="${iics.list.output}" 
			outputfile="${iics.export.output}" 
			todir="${iics.export.dir}" 
			user="${iics.source.user}" 
			password="${iics.source.password}" 
			region="${iics.region}" />
	</target>
	

	<target name="-check.exported">
		<condition property="iics.export.available">
			<available file="${iics.export.dir}/${iics.export.output}" />
		</condition>
	</target>

	<target name="iics.extract" depends="iics.export,-check.exported" if="iics.export.available">
		<iics.extract id="${iics.release.basename}" 
			file="${iics.export.dir}/${iics.export.output}" 
			todir="${iics.extract.dir}" />
	</target>

	<target name="iics.prepare.package">


	</target>

	<target name="iics.package" depends="-load.release.properties" >
        <iics.package id="${iics.release.basename}" 
        	workspace="${iics.extract.dir}" 
        	output="${iics.package.output}.zip" 
        	todir="${iics.import.dir}" 
        	file="${iics.target.package.config}"  />
    </target>
	
	
	<target name="clean.target" depends="-load.release.properties">
		<delete dir="${iics.export.dir}" verbose="true">
		</delete>
	</target>

	<target name="update.src" depends="-env.info,
		-select-release,
		-load.release.properties,
		-select-source-environment,
		-set-source-properties,
		 iics.extract" 
		description="Updates design ources directory fron Source Environment Org using iics Export utility">
	</target>


	<target name="package.src" depends="-env.info,
		-select-release,
		-load.release.properties,
		-set-target-properties,
		-select-package-config,
		 iics.package" 
		description="Builds Package for specified target enviornment from ${basedir}/src/ipd">
	</target>


	<macrodef name="iics.list" description="List resurces in IICS org using given query into a defined list file">
		<attribute name="id" default="1" />
		<attribute name="toDir" />
		<attribute name="output" />
		<attribute name="query" />
		<attribute name="region" default="us" />
		<attribute name="user" />
		<attribute name="password" />
		<sequential>
			<mkdir dir="@{toDir}" />
			<echo level="info">Listing query contents to: @{listFile}</echo>
			<property name="iics.list.command.@{id}" 
				value='list -r @{region} -u @{user} -p @{password} @{query} -o "@{toDir}/@{output}"' />
			<echo level="info">Running list -r @{region} -u @{user} -p **** @{query} -o "@{toDir}/@{output}"</echo>
			<exec dir="${basedir}" executable="${tool.iics}">
				<arg line="${iics.list.command.@{id}}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="iics.export" description="Export IICS Package using a defined list file">
		<attribute name="id" default="1" />
		<attribute name="toDir" />
		<attribute name="outputfile" />
		<attribute name="listFile" />
		<attribute name="region" default="us" />
		<attribute name="user" />
		<attribute name="password" />
		<sequential>
			<mkdir dir="@{toDir}" />
			<echo level="info">Exporting package using: @{listFile}</echo>
			<property name="iics.export.command.@{id}" value='export -r @{region} -u "@{user}" -p @{password} -f "@{toDir}/@{listFile}" -z "@{toDir}/@{outputfile}"' />
			<echo level="info">Running iics export -r @{region} -u '@{user}' -p **** -f '@{listFile}' -z '@{toDir}/@{outputfile}'</echo>
			<exec dir="${basedir}" executable="${tool.iics}">
				<arg line="${iics.export.command.@{id}}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="iics.extract" description="Extracts exported list to target directory">
		<attribute name="id" default="1" />
		<attribute name="file" />
		<attribute name="toDir" />
		<sequential>
			<mkdir dir="@{toDir}" />
			<property name="iics.extract.command.@{id}" value='extract -z "@{file}" -w "@{toDir}"' />
			<echo level="info">Running iics ${iics.extract.command.@{id}}</echo>
			<exec dir="${basedir}" executable="${tool.iics}">
				<arg line="${iics.extract.command.@{id}}" />
			</exec>
		</sequential>
	</macrodef>


	<macrodef name="iics.package" description="Creates a package of IICS artifacts from a local workspace directory into a zip file.">
    	<attribute name="id" default="1" />
    	<!-- Provide a  unique id for the packag step when multiple packages needs t be created by single script-->
    	<attribute name="file" />
    	<!-- Defines the path and file name of the text file that contains a list of artifacts to be included in the zip. -->
    	<attribute name="workspace" />
    	<!-- Defines the path of the workspace directory where the individual artifacts are available. -->
    	<attribute name="toDir" />
    	<!-- Defines the path and file name for the IICS import zip file that you want to create. -->
		<attribute name="output" />
    	<sequential>
    		<mkdir dir="@{toDir}" />
    		<property name="iics.package.command.@{id}" 
    			value='package -z "@{toDir}/@{output}" -w "@{workspace}" -f "@{file}"' />
            <echo level="info">Running iics ${iics.package.command.@{id}}</echo>
			<exec dir="${basedir}" executable="${tool.iics}" failonerror="true">
				<arg line="${iics.package.command.@{id}}" />
			</exec>
		</sequential>
	</macrodef>
	
	
	<macrodef name="iics.import" description="Imports IICS Package">
        <attribute name="id" default="1" />
        <attribute name="file" />
        <attribute name="region" default="us" />
        <attribute name="user" />
        <attribute name="password" />
		<attribute name="name" default="IICSS Tool Automated Import"/>
		<attribute name="maxWaitTime" default="240"/>
		<attribute name="synchronous" default="true"/>
		        
        <sequential>
            <mkdir dir="@{toDir}" />
            <echo level="info">Importing Package: @{file}</echo>
            <property name="iics.import.command.@{id}" 
            	value='import -r @{region} -u "@{user}" -p @{password} -f "@{toDir}/@{listFile}" -z "@{toDir}/@{outputfile}"' />
            <echo level="info">Running iics import -r @{region} -u "@{user}" -p **** -f "@{listFile}" -z "@{file}"</echo>
            <exec dir="${basedir}" executable="${tool.iics}">
                <arg line="${iics.import.command.@{id}}" />
            </exec>
        </sequential>
    </macrodef>


	<macrodef name="set.environment.credentials">
		<attribute name="direction" />
		<!--Defines as a 'source' or 'target' direction-->
		<attribute name="environment" />
		<!--Environment must be one of the values defined in the  ${iics.environment.list} in the Release configuration propertire or pased in as a parameter -->
		<sequential>
			<fail unless="iics.user.@{environment}" message="Missing property: iics.user.@{environment}" />
			<fail unless="iics.password.@{environment}" message="Missing property: iics.password.@{environment}" />
			<echo level="info">Setting: iics.@{direction}.user</echo>
			<property name="iics.@{direction}.user" value="${iics.user.@{environment}}" />
			<echo level="info">Setting: iics.@{direction}.password</echo>
			<property name="iics.@{direction}.password" value="${iics.password.@{environment}}" />
		</sequential>
	</macrodef>

</project>
